import { useState, useContext, useRef, useEffect } from "react";
import { HoursContext } from "../context/HoursContext";
import moment from "moment";
import 'moment/locale/es';

moment.locale('es');

const ModalAddHours = () => {
  const [showModal, setShowModal] = useState(false);
  const [isAnimating, setIsAnimating] = useState(false);
  const [hoursWorked, setHoursWorked] = useState(0);
  const [minutesWorked, setMinutesWorked] = useState(0);
  const [date, setDate] = useState(moment().format("YYYY-MM-DD"));
  const { addHours } = useContext(HoursContext);
  
  const modalRef = useRef();
  const [startX, setStartX] = useState(null); // Agregamos startX al estado

  const handleSubmit = (e) => {
    e.preventDefault();
    addHours(date, hoursWorked, minutesWorked);
    closeModal();
  };

  const closeModal = () => {
    setIsAnimating(false);
    setTimeout(() => {
      setShowModal(false);
    }, 300);
  };

  const openModal = () => {
    setShowModal(true);
    setHoursWorked(0);
    setMinutesWorked(0);
    setDate(moment().format("YYYY-MM-DD"));
  };

  const handleOutsideClick = (e) => {
    if (modalRef.current && !modalRef.current.contains(e.target)) {
      closeModal();
    }
  };

  useEffect(() => {
    if (showModal) {
      document.addEventListener("mousedown", handleOutsideClick);
      setIsAnimating(true);
    } else {
      document.removeEventListener("mousedown", handleOutsideClick);
    }

    return () => {
      document.removeEventListener("mousedown", handleOutsideClick);
    };
  }, [showModal]);

  const changeDate = (days) => {
    setDate(moment(date).add(days, 'days').format("YYYY-MM-DD"));
  };

  const handleTouchStart = (e) => {
    const touch = e.touches[0];
    setStartX(touch.clientX);
  };

  const handleTouchMove = (e) => {
    if (startX === null) return; // Asegúrate de que startX esté definido
    const touch = e.touches[0];
    const deltaX = startX - touch.clientX;

    if (deltaX > 50) {
      changeDate(1);
      setStartX(null);
    } else if (deltaX < -50) {
      changeDate(-1);
      setStartX(null);
    }
  };

  return (
    <>
      <button onClick={openModal} className="bg-blue-500 text-white px-4 py-2 rounded shadow-md hover:bg-blue-600 transition">
        Agregar Horas
      </button>

      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-end">
          <div
            ref={modalRef}
            className={`bg-white  w-screen  transform transition-transform duration-300 p-6 ${
              isAnimating ? 'translate-y-0' : 'translate-y-full'
            } shadow-lg`}
          >
            <h2 className="text-xl font-semibold mb-4">Agregar Horas</h2>
            <form onSubmit={handleSubmit}>
              <div className="flex justify-between mb-4">
                <div className="flex flex-col items-center">
                  <span className="text-lg font-medium">Horas: {hoursWorked}</span>
                  <div className="overflow-y-auto h-24 w-24 border border-gray-300 rounded-lg">
                    <ul className="flex flex-col">
                      {Array.from({ length: 24 }).map((_, index) => (
                        <li
                          key={index}
                          onClick={() => setHoursWorked(index)}
                          className={`p-2 text-center cursor-pointer hover:bg-gray-200 ${hoursWorked === index ? 'bg-gray-300' : ''}`}
                        >
                          {index}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
                <div className="flex flex-col items-center">
                  <span className="text-lg font-medium">Minutos: {minutesWorked}</span>
                  <div className="overflow-y-auto h-24 w-24 border border-gray-300 rounded-lg">
                    <ul className="flex flex-col">
                      {Array.from({ length: 12 }).map((_, index) => (
                        <li
                          key={index}
                          onClick={() => setMinutesWorked(index * 5)}
                          className={`p-2 text-center cursor-pointer hover:bg-gray-200 ${minutesWorked === index * 5 ? 'bg-gray-300' : ''}`}
                        >
                          {index * 5}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>

              <div className="mb-4">
                <label className="block mb-2 text-sm font-medium text-gray-700">Fecha:</label>
                <div className="flex flex-col items-center">
                  <div className="relative flex items-center mb-4">
                    <button
                      type="button"
                      onClick={() => changeDate(-1)}
                      className="bg-gray-300 px-2 py-1 rounded-l hover:bg-gray-400 transition"
                    >
                      ←
                    </button>
                    <div 
                      className="flex overflow-hidden space-x-2"
                      onTouchStart={handleTouchStart}
                      onTouchMove={handleTouchMove}
                    >
                      {Array.from({ length: 3 }).map((_, index) => (
                        <div key={index} className={`p-2 border border-gray-300 rounded-lg text-center ${index === 2 ? 'bg-gray-300' : 'opacity-50'}`}>
                          {moment(date).add(index - 2, 'days').locale('es').format("dddd D [de] MMMM")}

                        </div>
                      ))}
                    </div>
                    <button
                      type="button"
                      onClick={() => changeDate(1)}
                      className="bg-gray-300 px-2 py-1 rounded-r hover:bg-gray-400 transition"
                    >
                      →
                    </button>
                  </div>
                </div>
              </div>

              <div className="flex justify-between mt-4">
                <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition">
                  Guardar
                </button>
                <button type="button" onClick={closeModal} className="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400 transition">
                  Cerrar
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </>
  );
};

export default ModalAddHours;
